-- @path TableMM=/sma.hm/metamodel/tables.ecore
-- @path ClassMM=/sma.hm/metamodel/classes.ecore

module class2table;
create OUT : TableMM from IN : ClassMM;

rule clsdiag2db {
	from
		diag : ClassMM!ClassDiagram
	to 
		db : TableMM!Database (
			name <- diag.name,
			tables <- diag.classes
		)
}

rule class2table {
	from
		cls : ClassMM!Class
	to 
		tbl : TableMM!Table (
			name <- cls.name,
			columns <- cls.attributes,
			primary_key <- if (cls._primary_key->oclIsUndefined()) then
				thisModule.create_primary_key_column(tbl)
				else cls._primary_key endif
		)
}



rule attr2col {
	from
		attr : ClassMM!Attribute
	to 
		col : TableMM!Column (
			name <- attr.name,
			type <- attr.type--,
--			foreign_key <- 
		)
}

rule ref2fkandcol {
	from
		ref : ClassMM!Reference
	to
		fk : TableMM!ForeignKey (
			column <- col,
			name <- ref.name,
			target <- ref.target
		),
		col : TableMM!Column (
			name <- ref.name->concat('_')
					        ->concat(if ref.target._primary_key->oclIsUndefined()
					        	     then 'pk' else ref.target._primary_key.name endif),
			table <- ref.cls,
			foreign_key <- fk,
			type <- if ref.target._primary_key->oclIsUndefined()
					        	     then #integer else ref.target._primary_key.type endif
			
		)
	
}

rule create_primary_key_column(table : TableMM!Table) {
	to
		col : TableMM!Column (
			name <- 'pk',
			type <- #integer
		)
	do {
		table.columns <- table.columns->prepend(col);
		col; --return
	}
}



--rule addForeignKeyCol( table: TableMM!Table, name: String, type: Integer, fk: TableMM!ForeignKey ) {
--	to 
--		col : TableMM!ForeignKey (
--			table <- table,
--			name <- name,
--			type <- type,
--			foreign_key <- fk
--		)
--	do {
--		
--	}
--}